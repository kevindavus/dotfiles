#!/bin/bash

# Create a new directory and enter it
function md() {
	mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
	find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# List all files, long format, colorized, permissions in octal
function la(){
	if [[ $1 = '' ]]; then
 		exa --long --tree --git --level=1
  else
		exa --long --tree --git --level=$1
	fi
}

# List all files, long format, colorized, permissions in octal after cd
function cs(){
 	cd "$@"
	la
}

# cd into whatever is the forefront Finder window.
cdf() {  # short for cdfinder
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}



# git commit browser. needs fzf
log() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\` \
      --bind "ctrl-m:execute:
                echo '{}' | grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R'"
}



# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/" &
	# statik is good because it won't expose hidden folders/files by default.
	# npm install -g statik
	statik --port "$port" .
}


# Copy w/ progress
cp_p () {
  rsync -WavP --human-readable --progress $1 $2
}



# get gzipped size
function gz() {
	echo "orig size    (bytes): "
	cat "$1" | wc -c
	echo "gzipped size (bytes): "
	gzip -c "$1" | wc -c
}

# whois a domain or a URL
function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# avoid recursion
					# this is the best whois server
													# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

function localip(){
	function _localip(){ echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
	export -f _localip
	local purple="\x1B\[35m" reset="\x1B\[m"
	networksetup -listallhardwareports | \
		sed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
		sed -r "s/Device: (en.*)$/_localip \1/e" | \
		sed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
		sed -r "s/(VLAN Configurations)|==*//g"
}

# preview csv files. source: http://stackoverflow.com/questions/1875305/command-line-csv-viewer
function csvpreview(){
      sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

# Extract archives - use: extract <file>
# Based on http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f "$1" ] ; then
		local filename=$(basename "$1")
		local foldername="${filename%%.*}"
		local fullpath=`perl -e 'use Cwd "abs_path";print abs_path(shift)' "$1"`
		local didfolderexist=false
		if [ -d "$foldername" ]; then
			didfolderexist=true
			read -p "$foldername already exists, do you want to overwrite it? (y/n) " -n 1
			echo
			if [[ $REPLY =~ ^[Nn]$ ]]; then
				return
			fi
		fi
		mkdir -p "$foldername" && cd "$foldername"
		case $1 in
			*.tar.bz2) tar xjf "$fullpath" ;;
			*.tar.gz) tar xzf "$fullpath" ;;
			*.tar.xz) tar Jxvf "$fullpath" ;;
			*.tar.Z) tar xzf "$fullpath" ;;
			*.tar) tar xf "$fullpath" ;;
			*.taz) tar xzf "$fullpath" ;;
			*.tb2) tar xjf "$fullpath" ;;
			*.tbz) tar xjf "$fullpath" ;;
			*.tbz2) tar xjf "$fullpath" ;;
			*.tgz) tar xzf "$fullpath" ;;
			*.txz) tar Jxvf "$fullpath" ;;
			*.zip) unzip "$fullpath" ;;
			*) echo "'$1' cannot be extracted via extract()" && cd .. && ! $didfolderexist && rm -r "$foldername" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# who is using the laptop's iSight camera?
camerausedby() {
	echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
	usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
	echo -e "Recent camera uses:\n$usedby"
}


# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
	if [[ $2 == '--good' ]]; then
	  ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
	  time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
	  rm out-static*.png
	else
	  ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
	fi
  else
	echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# turn that video into webm.
# brew reinstall ffmpeg --with-libvpx
webmify(){
	ffmpeg -i "$1" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y "$2" "$1.webm"
}

# direct it all to /dev/null
function nullify() {
  "$@" >/dev/null 2>&1
}

#open jira to ticket number
#jira fad 1234
jira () {
	osascript ~/projects/dotfiles/corp.scpt

	if [[ $1 = 'progress' || $1 = 'current' || $1 = '' ]]; then
		open https://jira.int.messagesystems.com/secure/RapidBoard.jspa?rapidView=148
	elif [[ $1 = 'backlog' ]]; then
		open "https://jira.int.messagesystems.com/secure/RapidBoard.jspa?rapidView=325&view=planning.nodetail&quickFilter=2043"
	else
		open https://jira.int.messagesystems.com/browse/$1-$2
	fi
}

startui () {
	osascript ~/projects/dotfiles/aws.scpt
	cd ~/projects/webui
	gulp
	open http://app.sparkpost.dev:3000
}

startacc () {
	#comment out app.tst.sparkpost for users, users api, and accounts
	sed -i '3 s/^/#/' /usr/local/etc/openresty/sites/sparkpost.conf;
	sed -i '9 s/^/#/' /usr/local/etc/openresty/sites/sparkpost.conf;
	sed -i '33 s/^/#/' /usr/local/etc/openresty/sites/sparkpost.conf;


	#un-comment localhost for users, users api, and accounts
	sed -i '4 s/#//' /usr/local/etc/openresty/sites/sparkpost.conf;
	sed -i '10 s/#//' /usr/local/etc/openresty/sites/sparkpost.conf;
	sed -i '34 s/#//' /usr/local/etc/openresty/sites/sparkpost.conf;


	sed -n -e '2,4p' -e '8,10p' -e '32,34p' /usr/local/etc/openresty/sites/sparkpost.conf

	cd ~/projects/accusers-api/api
	sudo brew services start openresty
	sudo brew services start dnsmasq
	npm start
}

endacc () {
	killall node

	sed -i '4 s/^/#/' /usr/local/etc/openresty/sites/sparkpost.conf;
	sed -i '10 s/^/#/' /usr/local/etc/openresty/sites/sparkpost.conf;
	sed -i '34 s/^/#/' /usr/local/etc/openresty/sites/sparkpost.conf;


	#un-comment localhost for users, users api, and accounts
	sed -i '3 s/#//' /usr/local/etc/openresty/sites/sparkpost.conf;
	sed -i '9 s/#//' /usr/local/etc/openresty/sites/sparkpost.conf;
	sed -i '33 s/#//' /usr/local/etc/openresty/sites/sparkpost.conf;


	sed -n -e '2,4p' -e '8,10p' -e '32,34p' /usr/local/etc/openresty/sites/sparkpost.conf
	sudo brew services stop openresty
	sudo brew services stop dnsmasq
}

run-playbook() {
  book=$1
  tenant=$2
  if [[ -z "$book" && -z "$tenant" ]]; then
    echo "Usage: \n run-playbook <playbook> <tenant> [--options]"
    return 255
  fi
  shift 2
  ansible-playbook ${book}.yml --inventory-file=site/${tenant}/inventory --extra-vars="env=$PWD/site/${tenant}/site/site" --user=msysdeploy --private-key=~/.ssh/ecbuild $@
}

update-envs() {
  cd ~/src/projects/Ansible-Environments
  #hg up develop
  #hg pull -u
  cp -R ~/src/projects/Ansible-Environments ~/src/projects/Ansible-Deployment/site/
}